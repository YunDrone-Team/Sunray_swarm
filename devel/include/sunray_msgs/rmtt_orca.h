// Generated by gencpp from file sunray_msgs/rmtt_orca.msg
// DO NOT EDIT!


#ifndef SUNRAY_MSGS_MESSAGE_RMTT_ORCA_H
#define SUNRAY_MSGS_MESSAGE_RMTT_ORCA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sunray_msgs
{
template <class ContainerAllocator>
struct rmtt_orca_
{
  typedef rmtt_orca_<ContainerAllocator> Type;

  rmtt_orca_()
    : header()
    , mission_state(0)
    , uav_id(0)
    , arrived_goal(false)
    , arrived_all_goal(false)
    , goal()
    , vel_orca()  {
      goal.assign(0.0);

      vel_orca.assign(0.0);
  }
  rmtt_orca_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mission_state(0)
    , uav_id(0)
    , arrived_goal(false)
    , arrived_all_goal(false)
    , goal()
    , vel_orca()  {
  (void)_alloc;
      goal.assign(0.0);

      vel_orca.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _mission_state_type;
  _mission_state_type mission_state;

   typedef uint8_t _uav_id_type;
  _uav_id_type uav_id;

   typedef uint8_t _arrived_goal_type;
  _arrived_goal_type arrived_goal;

   typedef uint8_t _arrived_all_goal_type;
  _arrived_all_goal_type arrived_all_goal;

   typedef boost::array<float, 2>  _goal_type;
  _goal_type goal;

   typedef boost::array<float, 2>  _vel_orca_type;
  _vel_orca_type vel_orca;





  typedef boost::shared_ptr< ::sunray_msgs::rmtt_orca_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sunray_msgs::rmtt_orca_<ContainerAllocator> const> ConstPtr;

}; // struct rmtt_orca_

typedef ::sunray_msgs::rmtt_orca_<std::allocator<void> > rmtt_orca;

typedef boost::shared_ptr< ::sunray_msgs::rmtt_orca > rmtt_orcaPtr;
typedef boost::shared_ptr< ::sunray_msgs::rmtt_orca const> rmtt_orcaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sunray_msgs::rmtt_orca_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sunray_msgs::rmtt_orca_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sunray_msgs::rmtt_orca_<ContainerAllocator1> & lhs, const ::sunray_msgs::rmtt_orca_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mission_state == rhs.mission_state &&
    lhs.uav_id == rhs.uav_id &&
    lhs.arrived_goal == rhs.arrived_goal &&
    lhs.arrived_all_goal == rhs.arrived_all_goal &&
    lhs.goal == rhs.goal &&
    lhs.vel_orca == rhs.vel_orca;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sunray_msgs::rmtt_orca_<ContainerAllocator1> & lhs, const ::sunray_msgs::rmtt_orca_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sunray_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sunray_msgs::rmtt_orca_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sunray_msgs::rmtt_orca_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sunray_msgs::rmtt_orca_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sunray_msgs::rmtt_orca_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sunray_msgs::rmtt_orca_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sunray_msgs::rmtt_orca_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sunray_msgs::rmtt_orca_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94cd23020ece232971ee6a1b721a7e0d";
  }

  static const char* value(const ::sunray_msgs::rmtt_orca_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94cd23020ece2329ULL;
  static const uint64_t static_value2 = 0x71ee6a1b721a7e0dULL;
};

template<class ContainerAllocator>
struct DataType< ::sunray_msgs::rmtt_orca_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sunray_msgs/rmtt_orca";
  }

  static const char* value(const ::sunray_msgs::rmtt_orca_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sunray_msgs::rmtt_orca_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## 基本状态\n"
"uint8 mission_state\n"
"## 基本状态\n"
"uint8 uav_id                ## 无人机编号\n"
"## 是否到达目标点\n"
"bool arrived_goal\n"
"## 是否到达目标点\n"
"bool arrived_all_goal\n"
"## 目标位置\n"
"float32[2] goal                 ## [m]\n"
"## ORCA期望速度\n"
"float32[2] vel_orca                 ## [m/s]\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"    \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sunray_msgs::rmtt_orca_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sunray_msgs::rmtt_orca_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mission_state);
      stream.next(m.uav_id);
      stream.next(m.arrived_goal);
      stream.next(m.arrived_all_goal);
      stream.next(m.goal);
      stream.next(m.vel_orca);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rmtt_orca_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sunray_msgs::rmtt_orca_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sunray_msgs::rmtt_orca_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mission_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mission_state);
    s << indent << "uav_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uav_id);
    s << indent << "arrived_goal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arrived_goal);
    s << indent << "arrived_all_goal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arrived_all_goal);
    s << indent << "goal[]" << std::endl;
    for (size_t i = 0; i < v.goal.size(); ++i)
    {
      s << indent << "  goal[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.goal[i]);
    }
    s << indent << "vel_orca[]" << std::endl;
    for (size_t i = 0; i < v.vel_orca.size(); ++i)
    {
      s << indent << "  vel_orca[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel_orca[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUNRAY_MSGS_MESSAGE_RMTT_ORCA_H
