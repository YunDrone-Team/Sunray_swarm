// Generated by gencpp from file sunray_msgs/rmtt_state.msg
// DO NOT EDIT!


#ifndef SUNRAY_MSGS_MESSAGE_RMTT_STATE_H
#define SUNRAY_MSGS_MESSAGE_RMTT_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>

namespace sunray_msgs
{
template <class ContainerAllocator>
struct rmtt_state_
{
  typedef rmtt_state_<ContainerAllocator> Type;

  rmtt_state_()
    : header()
    , uav_id(0)
    , uav_ip()
    , connected(false)
    , odom_valid(false)
    , pos()
    , vel()
    , att()
    , attitude_q()
    , battery(0.0)  {
      pos.assign(0.0);

      vel.assign(0.0);

      att.assign(0.0);
  }
  rmtt_state_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , uav_id(0)
    , uav_ip(_alloc)
    , connected(false)
    , odom_valid(false)
    , pos()
    , vel()
    , att()
    , attitude_q(_alloc)
    , battery(0.0)  {
  (void)_alloc;
      pos.assign(0.0);

      vel.assign(0.0);

      att.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _uav_id_type;
  _uav_id_type uav_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _uav_ip_type;
  _uav_ip_type uav_ip;

   typedef uint8_t _connected_type;
  _connected_type connected;

   typedef uint8_t _odom_valid_type;
  _odom_valid_type odom_valid;

   typedef boost::array<float, 3>  _pos_type;
  _pos_type pos;

   typedef boost::array<float, 3>  _vel_type;
  _vel_type vel;

   typedef boost::array<float, 3>  _att_type;
  _att_type att;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _attitude_q_type;
  _attitude_q_type attitude_q;

   typedef float _battery_type;
  _battery_type battery;





  typedef boost::shared_ptr< ::sunray_msgs::rmtt_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sunray_msgs::rmtt_state_<ContainerAllocator> const> ConstPtr;

}; // struct rmtt_state_

typedef ::sunray_msgs::rmtt_state_<std::allocator<void> > rmtt_state;

typedef boost::shared_ptr< ::sunray_msgs::rmtt_state > rmtt_statePtr;
typedef boost::shared_ptr< ::sunray_msgs::rmtt_state const> rmtt_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sunray_msgs::rmtt_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sunray_msgs::rmtt_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sunray_msgs::rmtt_state_<ContainerAllocator1> & lhs, const ::sunray_msgs::rmtt_state_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.uav_id == rhs.uav_id &&
    lhs.uav_ip == rhs.uav_ip &&
    lhs.connected == rhs.connected &&
    lhs.odom_valid == rhs.odom_valid &&
    lhs.pos == rhs.pos &&
    lhs.vel == rhs.vel &&
    lhs.att == rhs.att &&
    lhs.attitude_q == rhs.attitude_q &&
    lhs.battery == rhs.battery;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sunray_msgs::rmtt_state_<ContainerAllocator1> & lhs, const ::sunray_msgs::rmtt_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sunray_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sunray_msgs::rmtt_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sunray_msgs::rmtt_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sunray_msgs::rmtt_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sunray_msgs::rmtt_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sunray_msgs::rmtt_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sunray_msgs::rmtt_state_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sunray_msgs::rmtt_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de75954d091d59270669c065fee318b6";
  }

  static const char* value(const ::sunray_msgs::rmtt_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde75954d091d5927ULL;
  static const uint64_t static_value2 = 0x0669c065fee318b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::sunray_msgs::rmtt_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sunray_msgs/rmtt_state";
  }

  static const char* value(const ::sunray_msgs::rmtt_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sunray_msgs::rmtt_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## 基本状态\n"
"uint8 uav_id                ## 无人机编号\n"
"string uav_ip               ## 无人机IP\n"
"bool connected             ## 是否连接上rmtt驱动\n"
"bool odom_valid             ## 是否收到动捕数据\n"
"\n"
"## 位置、速度、姿态\n"
"float32[3] pos                 ## [m]\n"
"float32[3] vel                 ## [m/s]\n"
"float32[3] att                 ## [rad]\n"
"geometry_msgs/Quaternion attitude_q ## 四元数\n"
"\n"
"## 电池状态\n"
"float32 battery                ## [0-1]\n"
"\n"
"\n"
"\n"
"\n"
"    \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::sunray_msgs::rmtt_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sunray_msgs::rmtt_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.uav_id);
      stream.next(m.uav_ip);
      stream.next(m.connected);
      stream.next(m.odom_valid);
      stream.next(m.pos);
      stream.next(m.vel);
      stream.next(m.att);
      stream.next(m.attitude_q);
      stream.next(m.battery);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rmtt_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sunray_msgs::rmtt_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sunray_msgs::rmtt_state_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "uav_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uav_id);
    s << indent << "uav_ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.uav_ip);
    s << indent << "connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connected);
    s << indent << "odom_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.odom_valid);
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "att[]" << std::endl;
    for (size_t i = 0; i < v.att.size(); ++i)
    {
      s << indent << "  att[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.att[i]);
    }
    s << indent << "attitude_q: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude_q);
    s << indent << "battery: ";
    Printer<float>::stream(s, indent + "  ", v.battery);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUNRAY_MSGS_MESSAGE_RMTT_STATE_H
