// Generated by gencpp from file sunray_msgs/ugv_cmd.msg
// DO NOT EDIT!


#ifndef SUNRAY_MSGS_MESSAGE_UGV_CMD_H
#define SUNRAY_MSGS_MESSAGE_UGV_CMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Twist.h>

namespace sunray_msgs
{
template <class ContainerAllocator>
struct ugv_cmd_
{
  typedef ugv_cmd_<ContainerAllocator> Type;

  ugv_cmd_()
    : header()
    , agent_id(0)
    , control_state(0)
    , desired_pos()
    , desired_yaw(0.0)
    , desired_vel()  {
    }
  ugv_cmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , agent_id(0)
    , control_state(0)
    , desired_pos(_alloc)
    , desired_yaw(0.0)
    , desired_vel(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _agent_id_type;
  _agent_id_type agent_id;

   typedef uint8_t _control_state_type;
  _control_state_type control_state;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _desired_pos_type;
  _desired_pos_type desired_pos;

   typedef float _desired_yaw_type;
  _desired_yaw_type desired_yaw;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _desired_vel_type;
  _desired_vel_type desired_vel;





  typedef boost::shared_ptr< ::sunray_msgs::ugv_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sunray_msgs::ugv_cmd_<ContainerAllocator> const> ConstPtr;

}; // struct ugv_cmd_

typedef ::sunray_msgs::ugv_cmd_<std::allocator<void> > ugv_cmd;

typedef boost::shared_ptr< ::sunray_msgs::ugv_cmd > ugv_cmdPtr;
typedef boost::shared_ptr< ::sunray_msgs::ugv_cmd const> ugv_cmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sunray_msgs::ugv_cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sunray_msgs::ugv_cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sunray_msgs::ugv_cmd_<ContainerAllocator1> & lhs, const ::sunray_msgs::ugv_cmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.agent_id == rhs.agent_id &&
    lhs.control_state == rhs.control_state &&
    lhs.desired_pos == rhs.desired_pos &&
    lhs.desired_yaw == rhs.desired_yaw &&
    lhs.desired_vel == rhs.desired_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sunray_msgs::ugv_cmd_<ContainerAllocator1> & lhs, const ::sunray_msgs::ugv_cmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sunray_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sunray_msgs::ugv_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sunray_msgs::ugv_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sunray_msgs::ugv_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sunray_msgs::ugv_cmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sunray_msgs::ugv_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sunray_msgs::ugv_cmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sunray_msgs::ugv_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1941fe70865cfa39c036a2c1ad0339a";
  }

  static const char* value(const ::sunray_msgs::ugv_cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa1941fe70865cfa3ULL;
  static const uint64_t static_value2 = 0x9c036a2c1ad0339aULL;
};

template<class ContainerAllocator>
struct DataType< ::sunray_msgs::ugv_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sunray_msgs/ugv_cmd";
  }

  static const char* value(const ::sunray_msgs::ugv_cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sunray_msgs::ugv_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## 当指定ID的时候，只有指定的ID响应\n"
"uint8 agent_id  \n"
"\n"
"## 状态机指令\n"
"uint8 control_state   \n"
"\n"
"## 期望位置、偏航角 -> 对应POS_CONTROL模式\n"
"geometry_msgs/Point desired_pos    ## [m]\n"
"float32 desired_yaw                 ## [rad]\n"
"\n"
"## 期望速度 -> 对应VEL_CONTROL模式\n"
"geometry_msgs/Twist desired_vel\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"    \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::sunray_msgs::ugv_cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sunray_msgs::ugv_cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.agent_id);
      stream.next(m.control_state);
      stream.next(m.desired_pos);
      stream.next(m.desired_yaw);
      stream.next(m.desired_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ugv_cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sunray_msgs::ugv_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sunray_msgs::ugv_cmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "agent_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.agent_id);
    s << indent << "control_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_state);
    s << indent << "desired_pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.desired_pos);
    s << indent << "desired_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.desired_yaw);
    s << indent << "desired_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.desired_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUNRAY_MSGS_MESSAGE_UGV_CMD_H
