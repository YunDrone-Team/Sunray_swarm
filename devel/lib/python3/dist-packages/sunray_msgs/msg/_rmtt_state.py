# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sunray_msgs/rmtt_state.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class rmtt_state(genpy.Message):
  _md5sum = "de75954d091d59270669c065fee318b6"
  _type = "sunray_msgs/rmtt_state"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

## 基本状态
uint8 uav_id                ## 无人机编号
string uav_ip               ## 无人机IP
bool connected             ## 是否连接上rmtt驱动
bool odom_valid             ## 是否收到动捕数据

## 位置、速度、姿态
float32[3] pos                 ## [m]
float32[3] vel                 ## [m/s]
float32[3] att                 ## [rad]
geometry_msgs/Quaternion attitude_q ## 四元数

## 电池状态
float32 battery                ## [0-1]




    

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','uav_id','uav_ip','connected','odom_valid','pos','vel','att','attitude_q','battery']
  _slot_types = ['std_msgs/Header','uint8','string','bool','bool','float32[3]','float32[3]','float32[3]','geometry_msgs/Quaternion','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,uav_id,uav_ip,connected,odom_valid,pos,vel,att,attitude_q,battery

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rmtt_state, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.uav_id is None:
        self.uav_id = 0
      if self.uav_ip is None:
        self.uav_ip = ''
      if self.connected is None:
        self.connected = False
      if self.odom_valid is None:
        self.odom_valid = False
      if self.pos is None:
        self.pos = [0.] * 3
      if self.vel is None:
        self.vel = [0.] * 3
      if self.att is None:
        self.att = [0.] * 3
      if self.attitude_q is None:
        self.attitude_q = geometry_msgs.msg.Quaternion()
      if self.battery is None:
        self.battery = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.uav_id = 0
      self.uav_ip = ''
      self.connected = False
      self.odom_valid = False
      self.pos = [0.] * 3
      self.vel = [0.] * 3
      self.att = [0.] * 3
      self.attitude_q = geometry_msgs.msg.Quaternion()
      self.battery = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.uav_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.uav_ip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.connected, _x.odom_valid))
      buff.write(_get_struct_3f().pack(*self.pos))
      buff.write(_get_struct_3f().pack(*self.vel))
      buff.write(_get_struct_3f().pack(*self.att))
      _x = self
      buff.write(_get_struct_4df().pack(_x.attitude_q.x, _x.attitude_q.y, _x.attitude_q.z, _x.attitude_q.w, _x.battery))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.attitude_q is None:
        self.attitude_q = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.uav_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uav_ip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uav_ip = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.connected, _x.odom_valid,) = _get_struct_2B().unpack(str[start:end])
      self.connected = bool(self.connected)
      self.odom_valid = bool(self.odom_valid)
      start = end
      end += 12
      self.pos = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.vel = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.att = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 36
      (_x.attitude_q.x, _x.attitude_q.y, _x.attitude_q.z, _x.attitude_q.w, _x.battery,) = _get_struct_4df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.uav_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.uav_ip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.connected, _x.odom_valid))
      buff.write(self.pos.tostring())
      buff.write(self.vel.tostring())
      buff.write(self.att.tostring())
      _x = self
      buff.write(_get_struct_4df().pack(_x.attitude_q.x, _x.attitude_q.y, _x.attitude_q.z, _x.attitude_q.w, _x.battery))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.attitude_q is None:
        self.attitude_q = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.uav_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uav_ip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uav_ip = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.connected, _x.odom_valid,) = _get_struct_2B().unpack(str[start:end])
      self.connected = bool(self.connected)
      self.odom_valid = bool(self.odom_valid)
      start = end
      end += 12
      self.pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.att = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 36
      (_x.attitude_q.x, _x.attitude_q.y, _x.attitude_q.z, _x.attitude_q.w, _x.battery,) = _get_struct_4df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4df = None
def _get_struct_4df():
    global _struct_4df
    if _struct_4df is None:
        _struct_4df = struct.Struct("<4df")
    return _struct_4df
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
